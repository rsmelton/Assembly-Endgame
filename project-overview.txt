Outer game handles logic. Inner component handles results/display. 

1. What is the structure of the application?
   Outermost container: Flex container with centered items
    H1 tag: Assembly: Endgame

    p tag: Instructional message

    Popup that displays some message like You win or Game over or Farewell HTML & CSS, etc

    Container containing all the different programming languages

    Boxes for the word that needs to be guessed

    Our Keyboard

    New game button that appears once you win or lose

2. What are the main components I will need?
    1. We may have a component for the popup or we could alternatively
       write the code for it inside our outermost container.
    2. We probably need a component for each of our programming language boxes. 
    3. We for sure need a component for the boxes that hold the letters that the user guesses.
    4. We may or may not need a component for the keyboard.
    5. We need a component for each key on our keyboard.

3. What state needs to get tracked? And where?
    Popup: 
        This appears when a few different things happen:
            - Most of the time it appears when you guess incorrectly.
            - When you win
            - When you lose
        What about this changes?
            - The background color: Purple when guessed incorrectly, Green for when you win, Red for when you lose
            - The text content on the inside changes.
        This is a side effect of when the user clicks a key
    Programming languages:
        - The state of these only change when the user guesses incorrectly
        - The game is over if the player reaches Assembly
    Guess boxes:
        - Changes when the user guesses a correct letter or when the game is over and then we populate
          the guess boxes with the remaining letters and make the letters red to show which letters they missed
        - The letter the user guesses is checked against the array of characters of the correct word
          and then populates the guess boxes with the correct letters
    Keyboard keys:
        It seems like the keys on the keyboard have 4 different states they could be in
            1. Yellow: Pre-guess
            2. Green: Correct guess
            3. Red: Incorrect guess
            4. Half Opacity: When the game is over (can no longer click keys)
    New Game button:
        - Only appears when the game is over

4. How is the game supposed to be played?
    1. The user clicks a key on the keyboard.
        - If the letter they guessed was correct, the key turns green and we apply the letter 
          everywhere in the word where the letter matches the correct words letter. 
        - If the letter they guessed was incorrect, the key turns red and we take away one
          of the programming languages. 
    2. The user repeatedly clicks keys until the game is either won or lost. 

5. When is the game over?
    The game is over when: 
        1. The user either spells the word out with guesses remaining. (Win)
        2. Or they hit Assembly and the game is over. (Lose)


Implementation thoughts:
    - Generate random word
    - Generate array with empty slots in length equivalent to random word
    - User clicks key
    - We compare the letter of the key to each letter in the random word and 
      fill in the slots of the empty array as needed

    How do we know when to change the background color of the key?
        - If we end up populating any slot in the guessed word slots
        - If we don't
        - If its the end of the game
        So what do we use to indicate this happened?
            - We can use state for the key inside the key component
            - The state can be an object that has different properties such as:
                - letter(string): populated by letter passed in
                - hasGuessed(boolean): false (default state - Yellow)
                - guessedCorrect(boolean): false (Set to true when correct - Green)
                - guessedIncorrect(boolean): false (Set to false when incorrect - Red)
            If it is the end of the game we can pass in a boolean to the key and we won't allow a click of the key
    
    Winning line:
        - User clicks keys until we fill up the container for the guessed word
    Losing line:
        - User clicks keys until we reach Assembly

    Programming languages container:
        - Have state to track the array and everytime we set the array i.e. eliminate
          a language, we can run a method to see if the game is over or not. 



guessLetter function implementation:
    When the user guesses a letter, what do we need to do?
        1. Set guessedCorrect flag to false by default
        2. Compare the letter to an array of letters produced from the word.
        - If there are matches:
            - Set guessArray to have new array with reflected guess
            - Set guessedCorrect flag to true
        - If there aren't matches:
            - Eliminate a programming language (Include this feature later)
            - Set programmingLanguages state
        Set keys state

Programming languages:
    What does our state look like?
        Ideas:
            1. Hold an array of 1's and 0's to determine whether or not the associated 
               programming language is still alive.
            2. Create an array of objects that stores each individual programming language
               and in each of these objects we have:
               1. Programming language text: string
               2. Dead or Alive: boolean
               3. Background color: string
               4. Text color: string
    What data structure do we use to hold them?
    How do we handle when getting a guess wrong? 
        - 
